# Complete Beginner's Guide: BMI Calculator with Streamlit

## Table of Contents
1. [Project Overview](#project-overview)
2. [Prerequisites](#prerequisites)
3. [Environment Setup](#environment-setup)
4. [Understanding the Libraries](#understanding-the-libraries)
5. [Project Structure](#project-structure)
6. [Code Explanation (Line by Line)](#code-explanation-line-by-line)
7. [Database Design](#database-design)
8. [Running the Application](#running-the-application)
9. [Testing the Features](#testing-the-features)
10. [Troubleshooting](#troubleshooting)

## Project Overview

### What We're Building
We're creating a **BMI (Body Mass Index) Calculator** web application that:
- Allows multiple users to register and login
- Calculates BMI from weight and height
- Stores historical BMI data in a database
- Shows trends and statistics with interactive charts
- Provides data export functionality

### Key Technologies
- **Streamlit**: For creating the web interface
- **SQLite**: For data storage
- **Plotly**: For interactive charts
- **Pandas**: For data manipulation
- **Python**: The programming language

## Prerequisites

### What You Need to Know
- Basic Python programming (variables, functions, if/else statements)
- Understanding of basic web concepts
- Familiarity with command line/terminal

### What You'll Learn
- Web application development with Streamlit
- Database operations with SQLite
- Data visualization with Plotly
- User authentication implementation
- File handling and data export

## Environment Setup

### Step 1: Install Python
1. Download Python from [python.org](https://www.python.org/downloads/)
2. Choose Python 3.8 or higher
3. During installation, check "Add Python to PATH"

### Step 2: Create Project Directory
```bash
# Create a new folder for your project
mkdir bmi_calculator
cd bmi_calculator
```

### Step 3: Install Required Libraries
```bash
# Install the required packages
pip install streamlit pandas plotly numpy
```

**What each library does:**
- `streamlit`: Creates web interfaces with Python
- `pandas`: Handles data manipulation and analysis
- `plotly`: Creates interactive charts and graphs
- `numpy`: Provides mathematical functions
- `sqlite3`: Built into Python, handles database operations

## Understanding the Libraries

### Streamlit
```python
import streamlit as st
st.title("Hello World")  # Creates a title on the webpage
st.button("Click me")    # Creates a clickable button
```

### Pandas
```python
import pandas as pd
df = pd.DataFrame({'Name': ['John', 'Jane'], 'Age': [25, 30]})  # Creates a data table
```

### Plotly
```python
import plotly.express as px
fig = px.line(x=[1,2,3], y=[4,5,6])  # Creates a line chart
```

### SQLite
```python
import sqlite3
conn = sqlite3.connect('database.db')  # Connects to database file
```

## Project Structure

```
bmi_calculator/
│
├── bmi_app.py          # Main application file
├── bmi_data.db         # Database file (created automatically)
└── requirements.txt    # List of required packages (optional)
```

## Code Explanation (Line by Line)

### Import Statements
```python
import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np
from typing import List, Dict, Tuple
import hashlib
```

**Explanation:**
- `streamlit as st`: Import Streamlit with a shorter name 'st'
- `pandas as pd`: Import Pandas for data handling
- `sqlite3`: Database operations
- `plotly.express as px`: Simple chart creation
- `plotly.graph_objects as go`: Advanced chart customization
- `datetime`: Handle dates and times
- `numpy as np`: Mathematical operations
- `typing`: Type hints for better code documentation
- `hashlib`: Password encryption

### Database Initialization Function
```python
def init_database():
    """Initialize SQLite database with users and BMI records tables"""
    conn = sqlite3.connect('bmi_data.db')
    cursor = conn.cursor()
```

**Explanation:**
- `def init_database():`: Creates a function named init_database
- `"""..."""`: Documentation string explaining what the function does
- `sqlite3.connect('bmi_data.db')`: Creates/connects to database file
- `cursor = conn.cursor()`: Creates a cursor to execute SQL commands

```python
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
```

**Explanation:**
- `cursor.execute()`: Runs SQL command
- `CREATE TABLE IF NOT EXISTS`: Creates table only if it doesn't exist
- `INTEGER PRIMARY KEY AUTOINCREMENT`: Auto-incrementing unique ID
- `TEXT UNIQUE NOT NULL`: Text field that must be unique and not empty
- `TIMESTAMP DEFAULT CURRENT_TIMESTAMP`: Automatically sets current time

```python
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bmi_records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            weight REAL NOT NULL,
            height REAL NOT NULL,
            bmi REAL NOT NULL,
            category TEXT NOT NULL,
            recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
```

**Explanation:**
- `REAL`: Decimal number type
- `FOREIGN KEY (user_id) REFERENCES users (id)`: Links records to specific users

```python
    conn.commit()
    conn.close()
```

**Explanation:**
- `conn.commit()`: Saves changes to database
- `conn.close()`: Closes database connection

### Password Security Function
```python
def hash_password(password: str) -> str:
    """Hash password using SHA256"""
    return hashlib.sha256(password.encode()).hexdigest()
```

**Explanation:**
- `password: str`: Parameter must be a string
- `-> str`: Function returns a string
- `password.encode()`: Converts string to bytes
- `hashlib.sha256()`: Creates SHA256 hash
- `.hexdigest()`: Converts hash to readable text

### User Registration Function
```python
def create_user(username: str, password: str) -> bool:
    """Create a new user account"""
    try:
        conn = sqlite3.connect('bmi_data.db')
        cursor = conn.cursor()
        password_hash = hash_password(password)
        cursor.execute('INSERT INTO users (username, password_hash) VALUES (?, ?)', 
                      (username, password_hash))
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        return False
```

**Explanation:**
- `try:`: Attempt to execute code
- `INSERT INTO users`: Add new row to users table
- `VALUES (?, ?)`: Placeholders for safe data insertion
- `(username, password_hash)`: Actual values to insert
- `except sqlite3.IntegrityError:`: Catch error if username already exists
- `return True/False`: Indicate success or failure

### User Authentication Function
```python
def authenticate_user(username: str, password: str) -> int:
    """Authenticate user and return user ID if successful"""
    conn = sqlite3.connect('bmi_data.db')
    cursor = conn.cursor()
    password_hash = hash_password(password)
    cursor.execute('SELECT id FROM users WHERE username = ? AND password_hash = ?', 
                  (username, password_hash))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None
```

**Explanation:**
- `SELECT id FROM users WHERE...`: Find user with matching credentials
- `cursor.fetchone()`: Get first matching result
- `result[0] if result else None`: Return user ID if found, otherwise None

### BMI Calculation Function
```python
def calculate_bmi(weight: float, height: float) -> Tuple[float, str]:
    """Calculate BMI and return BMI value and category"""
    bmi = weight / (height ** 2)
    
    if bmi < 18.5:
        category = "Underweight"
    elif 18.5 <= bmi < 25:
        category = "Normal weight"
    elif 25 <= bmi < 30:
        category = "Overweight"
    else:
        category = "Obese"
    
    return round(bmi, 2), category
```

**Explanation:**
- `weight / (height ** 2)`: BMI formula (weight ÷ height²)
- `height ** 2`: Height squared
- `if/elif/else`: Categorize BMI based on standard ranges
- `round(bmi, 2)`: Round to 2 decimal places
- `return`: Send back both BMI value and category

### Data Storage Function
```python
def save_bmi_record(user_id: int, weight: float, height: float, bmi: float, category: str):
    """Save BMI record to database"""
    conn = sqlite3.connect('bmi_data.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO bmi_records (user_id, weight, height, bmi, category)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, weight, height, bmi, category))
    conn.commit()
    conn.close()
```

**Explanation:**
- Takes all BMI calculation data as parameters
- Inserts new record into bmi_records table
- Links record to specific user via user_id

### Data Retrieval Function
```python
def get_user_bmi_history(user_id: int) -> pd.DataFrame:
    """Get BMI history for a specific user"""
    conn = sqlite3.connect('bmi_data.db')
    df = pd.read_sql_query('''
        SELECT weight, height, bmi, category, recorded_at
        FROM bmi_records
        WHERE user_id = ?
        ORDER BY recorded_at DESC
    ''', conn, params=(user_id,))
    conn.close()
    
    if not df.empty:
        df['recorded_at'] = pd.to_datetime(df['recorded_at'])
    
    return df
```

**Explanation:**
- `pd.read_sql_query()`: Execute SQL and return Pandas DataFrame
- `WHERE user_id = ?`: Filter records for specific user
- `ORDER BY recorded_at DESC`: Most recent records first
- `pd.to_datetime()`: Convert text dates to proper date format

### Statistics Calculation Function
```python
def get_bmi_statistics(df: pd.DataFrame) -> Dict:
    """Calculate BMI statistics"""
    if df.empty:
        return {}
    
    stats = {
        'total_records': len(df),
        'current_bmi': df.iloc[0]['bmi'],
        'average_bmi': df['bmi'].mean(),
        'min_bmi': df['bmi'].min(),
        'max_bmi': df['bmi'].max(),
        'weight_change': df.iloc[0]['weight'] - df.iloc[-1]['weight'] if len(df) > 1 else 0,
        'bmi_trend': 'Increasing' if len(df) > 1 and df.iloc[0]['bmi'] > df.iloc[-1]['bmi'] else 'Decreasing' if len(df) > 1 else 'No trend'
    }
    
    return stats
```

**Explanation:**
- `if df.empty:`: Check if DataFrame has data
- `len(df)`: Count number of records
- `df.iloc[0]`: First row (most recent due to DESC ordering)
- `df.iloc[-1]`: Last row (oldest record)
- `df['bmi'].mean()`: Calculate average BMI
- Dictionary comprehension to organize statistics

### Chart Creation Functions
```python
def create_bmi_trend_chart(df: pd.DataFrame):
    """Create BMI trend chart using Plotly"""
    if df.empty:
        return None
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=df['recorded_at'],
        y=df['bmi'],
        mode='lines+markers',
        name='BMI',
        line=dict(color='blue', width=2),
        marker=dict(size=8)
    ))
```

**Explanation:**
- `go.Figure()`: Create empty Plotly figure
- `go.Scatter()`: Add line chart with points
- `x=df['recorded_at']`: Dates on x-axis
- `y=df['bmi']`: BMI values on y-axis
- `mode='lines+markers'`: Show both line and points
- `dict()`: Styling options

```python
    fig.add_hline(y=18.5, line_dash="dash", line_color="lightblue", 
                  annotation_text="Underweight")
    fig.add_hline(y=25, line_dash="dash", line_color="green", 
                  annotation_text="Normal")
    fig.add_hline(y=30, line_dash="dash", line_color="orange", 
                  annotation_text="Overweight")
```

**Explanation:**
- `add_hline()`: Add horizontal reference lines
- Shows BMI category boundaries
- Helps visualize which category user's BMI falls into

### Main Application Function
```python
def main():
    st.set_page_config(
        page_title="BMI Calculator & Tracker",
        page_icon="⚖️",
        layout="wide"
    )
```

**Explanation:**
- `st.set_page_config()`: Configure webpage settings
- `page_title`: Browser tab title
- `page_icon`: Small icon in browser tab
- `layout="wide"`: Use full browser width

```python
    init_database()
    
    if 'user_id' not in st.session_state:
        st.session_state.user_id = None
    if 'username' not in st.session_state:
        st.session_state.username = None
```

**Explanation:**
- `init_database()`: Set up database tables
- `st.session_state`: Stores data between page interactions
- Initializes user login status

### Login/Registration Interface
```python
    if st.session_state.user_id is None:
        st.subheader("🔐 Login or Register")
        
        tab1, tab2 = st.tabs(["Login", "Register"])
```

**Explanation:**
- Check if user is logged in
- `st.tabs()`: Create tabbed interface
- Separate tabs for login and registration

```python
        with tab1:
            with st.form("login_form"):
                username = st.text_input("Username")
                password = st.text_input("Password", type="password")
                login_button = st.form_submit_button("Login")
```

**Explanation:**
- `with st.form()`: Group inputs together
- `st.text_input()`: Text input field
- `type="password"`: Hide password characters
- `st.form_submit_button()`: Submit button for form

```python
                if login_button:
                    if username and password:
                        user_id = authenticate_user(username, password)
                        if user_id:
                            st.session_state.user_id = user_id
                            st.session_state.username = username
                            st.success("Login successful!")
                            st.rerun()
                        else:
                            st.error("Invalid username or password")
```

**Explanation:**
- `if login_button:`: Execute when button is clicked
- `if username and password:`: Check both fields are filled
- Store user information in session state
- `st.success()`: Show green success message
- `st.rerun()`: Refresh page to show logged-in interface

### Main Application Interface
```python
        page = st.sidebar.selectbox("Navigate", 
                                   ["BMI Calculator", "Historical Data", "Trend Analysis", "Statistics"])
```

**Explanation:**
- `st.sidebar`: Add content to sidebar
- `st.selectbox()`: Dropdown menu for navigation
- Returns selected page name

### BMI Calculator Page
```python
        if page == "BMI Calculator":
            st.subheader("📊 BMI Calculator")
            
            col1, col2 = st.columns(2)
            
            with col1:
                weight = st.number_input("Weight (kg)", min_value=1.0, max_value=300.0, 
                                       value=70.0, step=0.1)
                height = st.number_input("Height (m)", min_value=0.5, max_value=3.0, 
                                       value=1.70, step=0.01)
```

**Explanation:**
- `st.columns(2)`: Create two-column layout
- `st.number_input()`: Numeric input with validation
- `min_value/max_value`: Set acceptable ranges
- `value`: Default starting value
- `step`: Increment when using arrows

```python
                if st.button("Calculate BMI", type="primary"):
                    bmi, category = calculate_bmi(weight, height)
                    
                    st.success(f"Your BMI is: **{bmi}**")
                    st.info(f"Category: **{category}**")
                    
                    save_bmi_record(st.session_state.user_id, weight, height, bmi, category)
                    st.success("BMI record saved!")
```

**Explanation:**
- `type="primary"`: Make button prominent (colored)
- `f"..."`: Format string to include variables
- `**text**`: Make text bold in Streamlit
- Save calculation to database

## Database Design

### Users Table
| Column | Type | Description |
|--------|------|-------------|
| id | INTEGER PRIMARY KEY | Unique user identifier |
| username | TEXT UNIQUE | User's login name |
| password_hash | TEXT | Encrypted password |
| created_at | TIMESTAMP | Account creation time |

### BMI Records Table
| Column | Type | Description |
|--------|------|-------------|
| id | INTEGER PRIMARY KEY | Unique record identifier |
| user_id | INTEGER | Links to users table |
| weight | REAL | Weight in kg |
| height | REAL | Height in meters |
| bmi | REAL | Calculated BMI value |
| category | TEXT | BMI category |
| recorded_at | TIMESTAMP | When record was created |

## Running the Application

### Step 1: Save the Code
1. Create a new file called `bmi_app.py`
2. Copy the complete code into this file
3. Save the file in your project directory

### Step 2: Run the Application
```bash
# Navigate to your project directory
cd bmi_calculator

# Start the Streamlit application
streamlit run bmi_app.py
```

### Step 3: Access the Application
- Streamlit will automatically open your browser
- If not, go to `http://localhost:8501`
- You should see the BMI Calculator login page

## Testing the Features

### Test 1: User Registration
1. Click the "Register" tab
2. Enter a username (e.g., "testuser")
3. Enter a password
4. Confirm the password
5. Click "Register"
6. Should see "Account created successfully!" message

### Test 2: User Login
1. Click the "Login" tab
2. Enter your username and password
3. Click "Login"
4. Should see the main application interface

### Test 3: BMI Calculation
1. Navigate to "BMI Calculator"
2. Enter weight (e.g., 70 kg)
3. Enter height (e.g., 1.75 m)
4. Click "Calculate BMI"
5. Should see BMI result and category
6. Should see "BMI record saved!" message

### Test 4: View Historical Data
1. Navigate to "Historical Data"
2. Should see table with your BMI records
3. Try downloading CSV file

### Test 5: View Trends
1. Add multiple BMI records with different values
2. Navigate to "Trend Analysis"
3. Should see charts showing BMI and weight trends

### Test 6: View Statistics
1. Navigate to "Statistics"
2. Should see summary statistics and recent records

## Troubleshooting

### Common Issues

#### Issue: "ModuleNotFoundError"
**Solution:** Install missing packages
```bash
pip install streamlit pandas plotly numpy
```

#### Issue: "sqlite3.OperationalError: database is locked"
**Solution:** Close all database connections properly or restart the application

#### Issue: Application won't start
**Solution:** Check for syntax errors, ensure Python version is 3.8+

#### Issue: Charts not displaying
**Solution:** Ensure Plotly is installed correctly
```bash
pip install --upgrade plotly
```

#### Issue: Data not saving
**Solution:** Check file permissions in the project directory

### Debug Mode
Add this to see detailed error messages:
```python
import streamlit as st
st.set_option('client.showErrorDetails', True)
```

### File Structure Check
Ensure your project directory looks like this:
```
bmi_calculator/
├── bmi_app.py          ✓ Main application file
├── bmi_data.db         ✓ Created automatically when you run the app
```

## Next Steps and Enhancements

### Beginner Enhancements
1. Add profile pictures for users
2. Include more health metrics (body fat percentage, muscle mass)
3. Add goal setting features
4. Include health tips based on BMI category

### Intermediate Enhancements
1. Add data backup and restore functionality
2. Implement email notifications for goal achievements
3. Add social features (share progress with friends)
4. Include diet and exercise recommendations

### Advanced Enhancements
1. Machine learning predictions for future BMI trends
2. Integration with fitness trackers
3. Multi-language support
4. Mobile app version

## Conclusion

You've successfully built a complete BMI tracking application! This project demonstrates:

- **Web Development**: Creating user interfaces with Streamlit
- **Database Management**: Storing and retrieving data with SQLite
- **Data Visualization**: Creating charts with Plotly
- **User Authentication**: Secure login systems
- **Data Analysis**: Statistical calculations and trend analysis

The application is production-ready and can be deployed to cloud platforms like Heroku, AWS, or Streamlit Cloud for public access.

### Key Learning Outcomes
- Understanding of full-stack web development
- Database design and SQL operations
- Data visualization techniques
- User interface design principles
- Security best practices for web applications

Congratulations on completing your BMI Calculator project!